если в коде ниже менять показание counter (в if + после него(чтобы каждый раз круг проходил)),
можно заметить, что вся информация нормально приходит для каждого пальца

возможно дело в том, что вывод информации на экран замедляет код, что приводит к ошибкам

(пробовала сделать задержку при чтении с порта, выводится непонятно что -> дело скорее всего в задержке)


#![no_std]
#![no_main]

use arduino_hal::prelude::*;
use panic_halt as _;

use embedded_hal::serial::Read;

#[arduino_hal::entry]
fn main() -> ! {
    let dp = arduino_hal::Peripherals::take().unwrap();
    let pins = arduino_hal::pins!(dp);
    let mut serial = arduino_hal::default_serial!(dp, pins, 57600);
    let mut info:u32 = 0;
    ufmt::uwriteln!(&mut serial, "Hello from Arduino!\r").void_unwrap();
    let mut counter = 0;

    loop {
        // Read a byte from the serial connection
        let b = nb::block!(serial.read()).void_unwrap();
        counter +=1;

        if counter == 3{
            ufmt::uwriteln!(&mut serial, "Got {}!\r", b).void_unwrap();
            counter = -3;
        }
        // Answer

    }
}
-----
разделять информацию и присылать каждый палец отдельно (или формировать меньшие массивы) не помогает

всё работает нормально, только если в массиве 3 элемента или меньше
---
framed-serial не работает т.к. нет crate "collections"
----
ниже некоторые попытки разобраться с проблемой с портом (чтобы не потерять случайно)

// #![no_std]
// #![no_main]
//
// use arduino_hal::prelude::*;
// use panic_halt as _;
//
// use embedded_hal::serial::Read;
//
// #[arduino_hal::entry]
// fn main() -> ! {
//     let mut start = false;
//     // let start_sign = 36;
//     let mut counter = 0;
//     let mut info:u32 = 0;
//     let dp = arduino_hal::Peripherals::take().unwrap();
//     let pins = arduino_hal::pins!(dp);
//     let mut serial = arduino_hal::default_serial!(dp, pins, 57600);
//
//     ufmt::uwriteln!(&mut serial, "Hello from Arduino!\r").void_unwrap();
//
//
//     loop {
//         // Read a byte from the serial connection
//         let b:u8 = nb::block!(serial.read()).void_unwrap();
//         // ufmt::uwriteln!(&mut serial, "Got {}!\r", b).void_unwrap();
//         if b == 36{
//             start = true;
//             counter += 1;
//             ufmt::uwriteln!(&mut serial, "start").void_unwrap();
//         }
//         while start {
//
//             let mut b:u8 = nb::block!(serial.read()).void_unwrap();
//             ufmt::uwriteln!(&mut serial, "{}", b).void_unwrap();
//
//             if b == 48{
//                 b = 0
//             } else if b == 49{
//                 b = 1
//             }
//             if counter == 1{
//                 info = b.into();
//                 // ufmt::uwriteln!(&mut serial, "Got {} for the first finger!\r", b).void_unwrap();
//                 counter += 1;
//
//             } else if counter == 2{
//                 let mut b1:u32 = b.into();
//                 info = info + b1 * 10;
//
//                 // ufmt::uwriteln!(&mut serial, "Got {} for the second finger!\r", b).void_unwrap();
//                 counter += 1;
//
//
//             } else if counter == 3{
//                 let mut b1:u32 = b.into();
//                 info += b1 * 100;
//                 // ufmt::uwriteln!(&mut serial, "Got {} for 3 finger!\r", b).void_unwrap();
//                 counter += 1;
//
//             } else if counter == 4{
//                 let mut b1:u32 = b.into();
//                 info += b1 * 1000;
//                 // ufmt::uwriteln!(&mut serial, "Got {} for 4 finger!\r", b).void_unwrap();
//                 counter += 1;
//
//             } else if counter == 5 {
//                 let mut b1:u32 = b.into();
//                 info += b1 * 10000;
//                 // ufmt::uwriteln!(&mut serial, "Got {} for 5 finger!\r", b).void_unwrap();
//                 counter += 1;
//                 start = false;
//             }
//
//         }
//
//         // Answer
//         ufmt::uwriteln!(&mut serial, "Got {}!\r", info).void_unwrap();
//         info = 0;
//     }
// }
// #![no_std]
// #![no_main]
//
// use arduino_hal::prelude::*;
// use panic_halt as _;
//
// use embedded_hal::serial::Read;
//
// #[arduino_hal::entry]
// fn main() -> ! {
//     let mut start = false;
//     // let start_sign = 36;
//     let mut counter = 0;
//     // let info_len = 5;
//     let dp = arduino_hal::Peripherals::take().unwrap();
//     let pins = arduino_hal::pins!(dp);
//     let mut serial = arduino_hal::default_serial!(dp, pins, 57600);
//
//     ufmt::uwriteln!(&mut serial, "Hello from Arduino!\r").void_unwrap();
//
//
//     loop {
//         // Read a byte from the serial connection
//         let mut b:u8 = nb::block!(serial.read()).void_unwrap();
//         // ufmt::uwriteln!(&mut serial, "Got {}!\r", b).void_unwrap();
//         // if b == 36{
//         //     start = true;
//         //     // counter += 1;
//         //     ufmt::uwriteln!(&mut serial, "start").void_unwrap();
//         //
//         // }
//         //
//         // while start {
//         // //
//         //     let b:u8 = nb::block!(serial.read()).void_unwrap();
//         //     if b == 53{
//         //         let b:u8 = nb::block!(serial.read()).void_unwrap();
//         //         ufmt::uwriteln!(&mut serial, "Got {} for one finger\r", b).void_unwrap();
//         //         let b:u8 = nb::block!(serial.read()).void_unwrap();
//         //         ufmt::uwriteln!(&mut serial, "Got {} for two\r", b).void_unwrap();
//         //
//         //
//         //     }
//         //     else if b == 54{
//         //         let b:u8 = nb::block!(serial.read()).void_unwrap();
//         //         ufmt::uwriteln!(&mut serial, "Got {} for 3\r", b).void_unwrap();
//         //         let b:u8 = nb::block!(serial.read()).void_unwrap();
//         //         ufmt::uwriteln!(&mut serial, "Got {} for 4", b).void_unwrap();
//         //         // let b:u8 = nb::block!(serial.read()).void_unwrap();
//         //         // ufmt::uwriteln!(&mut serial, "Got {} for 5", b).void_unwrap();
//         //         start = false;
//         //     }
//             //     //
//             //     // let b:u8 = nb::block!(serial.read()).void_unwrap();
//             //     // ufmt::uwriteln!(&mut serial, "Got {} &\r", b).void_unwrap();
//             //     // counter = 1;
//             // }
//             // else if b == 54 && counter == 1{
//             //     let b:u8 = nb::block!(serial.read()).void_unwrap();
//             //
//             //     ufmt::uwriteln!(&mut serial, "Got {} for the first finger!\r", b).void_unwrap();
//             //     counter += 1;
//             //
//             // } else if counter == 2{
//             //     ufmt::uwriteln!(&mut serial, "Got {} for the second finger!\r", b).void_unwrap();
//             //     counter += 1;
//             //
//             //
//             // } else if counter == 3{
//             //     ufmt::uwriteln!(&mut serial, "Got {} for 3 finger!\r", b).void_unwrap();
//             //     counter += 1;
//             //     counter = 0;
//             //
//             //     start = false;}
//
//             // } else if counter == 4{
//             //     ufmt::uwriteln!(&mut serial, "Got {} for 4 finger!\r", b).void_unwrap();
//             //     counter += 1;
//             //
//             //
//             // } else if counter == 5 {
//             //     ufmt::uwriteln!(&mut serial, "Got {} for 5 finger!\r", b).void_unwrap();
//             //     counter = 0;
//             //
//             //     start = false;
//             // }
//
//         // }
//         // counter = 0;
//         // start = false;
//         // Answer
//         ufmt::uwriteln!(&mut serial, "Got {}!\r", b).void_unwrap();
//     }
// }

// #![no_std]
// #![no_main]
//
// use arduino_hal::prelude::*;
// use panic_halt as _;
//
// use embedded_hal::serial::Read;
//
// #[arduino_hal::entry]
// fn main() -> ! {
//     let mut start = false;
//     // let start_sign = 36;
//     let mut counter = 0;
//     // let info_len = 5;
//     let dp = arduino_hal::Peripherals::take().unwrap();
//     let pins = arduino_hal::pins!(dp);
//     let mut serial = arduino_hal::default_serial!(dp, pins, 57600);
//
//     ufmt::uwriteln!(&mut serial, "Hello from Arduino!\r").void_unwrap();
//
//     let mut b1= 3;
//     let mut b2=3 ;
//     let mut b3=3;
//     let mut b4=3;
//     let mut b5=3;
//
//
//     loop {
//         // Read a byte from the serial connection
//         let b:u8 = nb::block!(serial.read()).void_unwrap();
//         // ufmt::uwriteln!(&mut serial, "Got {}!\r", b).void_unwrap();
//         if b == 36{
//             start = true;
//             counter += 1;
//             ufmt::uwriteln!(&mut serial, "start").void_unwrap();
//         }
//         while start {
//
//             let b:u8 = nb::block!(serial.read()).void_unwrap();
//             if counter == 1{
//                 b1 = b;
//                 counter += 1;
//
//             } else if counter == 2{
//                 b2 = b;
//                 counter += 1;
//
//
//             } else if counter == 3{
//                 b3 = b;
//                 counter += 1;
//
//             } else if counter == 4{
//                 b4 = b;
//                 counter += 1;
//
//             } else if counter == 5 {
//                 b5 = b;
//                 counter += 1;
//                 start = false;
//             }
//
//         }
//         counter = 0;
//         start = false;
//         ufmt::uwriteln!(&mut serial, "Got {}{}{}{}{}!\r", b1, b2, b3, b4, b5).void_unwrap();
//         ufmt::uwriteln!(&mut serial, "1Got {}!\r", b1).void_unwrap();
//         ufmt::uwriteln!(&mut serial, "2Got {}!\r", b2).void_unwrap();
//         ufmt::uwriteln!(&mut serial, "3Got {}!\r", b3).void_unwrap();
//         ufmt::uwriteln!(&mut serial, "4Got {}!\r", b4).void_unwrap();
//         ufmt::uwriteln!(&mut serial, "5Got {}!\r", b5).void_unwrap();
//
//         // Answer
//         // ufmt::uwriteln!(&mut serial, "Got {}!\r", b).void_unwrap();
//     }
// }

// #![no_std]
// #![no_main]
// #![feature(alloc)]
//
// extern crate alloc;
// use alloc::vec::Vec;
// use arduino_hal::prelude::*;
// use panic_halt as _;
//
// use embedded_hal::serial::Read;
//
// #[arduino_hal::entry]
// fn main() -> ! {
//     let mut start = false;
//     // let start_sign = 36;
//     let mut counter = 0;
//     // let info_len = 5;
//     let dp = arduino_hal::Peripherals::take().unwrap();
//     let pins = arduino_hal::pins!(dp);
//     let mut serial = arduino_hal::default_serial!(dp, pins, 57600);
//     // let mut string:str = "".into();
//     let mut vec = Vec::new();
//     ufmt::uwriteln!(&mut serial, "Hello from Arduino!\r").void_unwrap();
//
//
//     loop {
//         // Read a byte from the serial connection
//         let b:u8 = nb::block!(serial.read()).void_unwrap();
//         // ufmt::uwriteln!(&mut serial, "Got {}!\r", b).void_unwrap();
//         if b == 36{
//             start = true;
//             counter += 1;
//             ufmt::uwriteln!(&mut serial, "start").void_unwrap();
//         }
//         if start {
//             if counter < 5{
//                 let b:str = nb::block!(serial.read()).void_unwrap().into();
//                 string += b;
//                 counter += 1;
//             } if counter >= 5 {
//                 for i in range(5){
//                     vec.push(b);
//                 }
//             }
//
//         }
//         ufmt::uwriteln!(&mut serial, "Got {}!\r", vec).void_unwrap();
//         let mut vec = Vec::new();
//         counter = 0;
//         start = false;
//         // string = *"";
//         // Answer
//         // ufmt::uwriteln!(&mut serial, "Got {}!\r", b).void_unwrap();
//     }
// }


// #![no_std]
// #![no_main]
//
// use arduino_hal::prelude::*;
// use panic_halt as _;
//
// use embedded_hal::serial::Read;
//
// #[arduino_hal::entry]
// fn main() -> ! {
//     let mut start = false;
//     // let start_sign = 36;
//     let mut counter = 0;
//     // let info_len = 5;
//     let dp = arduino_hal::Peripherals::take().unwrap();
//     let pins = arduino_hal::pins!(dp);
//     let mut serial = arduino_hal::default_serial!(dp, pins, 57600);
//
//     ufmt::uwriteln!(&mut serial, "Hello from Arduino!\r").void_unwrap();
//
//
//     loop {
//         // Read a byte from the serial connection
//         let b:u8 = nb::block!(serial.read()).void_unwrap();
//         // ufmt::uwriteln!(&mut serial, "Got {}!\r", b).void_unwrap();
//         // if b == 36{
//         //     start = true;
//         //     counter += 1;
//         //     ufmt::uwriteln!(&mut serial, "start").void_unwrap();
//         // }
//         // while start {
//         //
//         //     let b:u8 = nb::block!(serial.read()).void_unwrap();
//             // if b == 48{
//             //     let b:u8 = nb::block!(serial.read()).void_unwrap();
//             //
//             //     ufmt::uwriteln!(&mut serial, "Got {} for the first finger!\r", b).void_unwrap();
//             //     counter += 1;
//             //     start = false;
//             //
//             // } else if b == 49{
//             //     let b:u8 = nb::block!(serial.read()).void_unwrap();
//             //
//             //     ufmt::uwriteln!(&mut serial, "Got {} for the second finger!\r", b).void_unwrap();
//             //     counter += 1;
//             //     start = false;
//             //
//             // } else if b == 50{
//             //     let b:u8 = nb::block!(serial.read()).void_unwrap();
//             //
//             //     ufmt::uwriteln!(&mut serial, "Got {} for 3 finger!\r", b).void_unwrap();
//             //     counter += 1;
//             //     start = false;
//             //
//             //
//             // } else if b == 51{
//             //     let b:u8 = nb::block!(serial.read()).void_unwrap();
//             //
//             //     ufmt::uwriteln!(&mut serial, "Got {} for 4 finger!\r", b).void_unwrap();
//             //     counter += 1;
//             //     start = false;
//             //
//             // } else if b == 52{
//             //     let b:u8 = nb::block!(serial.read()).void_unwrap();
//             //
//             //     ufmt::uwriteln!(&mut serial, "Got {} for 5 finger!\r", b).void_unwrap();
//             //     counter += 1;
//             //     start = false;
//             // } else if counter == 3{
//             //     ufmt::uwriteln!(&mut serial, "Got {} for 3 finger!\r", b).void_unwrap();
//             //     counter += 1;
//             //
//             // } else if counter == 4{
//             //     ufmt::uwriteln!(&mut serial, "Got {} for 4 finger!\r", b).void_unwrap();
//             //     counter += 1;
//
//             // } else if counter == 5 {
//             //     ufmt::uwriteln!(&mut serial, "Got {} for 5 finger!\r", b).void_unwrap();
//             //     counter += 1;
//             //     start = false;
//         //     }
//         //
//         // }
//         counter = 0;
//         start = false;
//         // Answer
//         ufmt::uwriteln!(&mut serial, "Got {}!\r", b).void_unwrap();
//     }
// }
//
//
// #![no_std]
// #![no_main]
//
// use arduino_hal::prelude::*;
// use panic_halt as _;
//
// use embedded_hal::serial::Read;
//
// #[arduino_hal::entry]
// fn main() -> ! {
//     let mut start = false;
//     // let start_sign = 36;
//     let mut counter = 0;
//     // let info_len = 5;
//     let dp = arduino_hal::Peripherals::take().unwrap();
//     let pins = arduino_hal::pins!(dp);
//     let mut serial = arduino_hal::default_serial!(dp, pins, 57600);
//
//     ufmt::uwriteln!(&mut serial, "Hello from Arduino!\r").void_unwrap();
//
//
//     loop {
//         // Read a byte from the serial connection
//         let b:u8 = nb::block!(serial.read()).void_unwrap();
//         // ufmt::uwriteln!(&mut serial, "Got {}!\r", b).void_unwrap();
//         if b == 36{
//             start = true;
//             counter += 1;
//             ufmt::uwriteln!(&mut serial, "start").void_unwrap();
//         }
//         while start {
//
//             let b:u8 = nb::block!(serial.read()).void_unwrap();
//             if counter == 1{
//                 ufmt::uwriteln!(&mut serial, "Got {} for the first finger!\r", b).void_unwrap();
//                 counter += 1;
//
//             } else if counter == 2{
//                 ufmt::uwriteln!(&mut serial, "Got {} for the second finger!\r", b).void_unwrap();
//                 counter += 1;
//
//
//             } else if counter == 3{
//                 ufmt::uwriteln!(&mut serial, "Got {} for 3 finger!\r", b).void_unwrap();
//                 counter += 1;
//
//             } else if counter == 4{
//                 ufmt::uwriteln!(&mut serial, "Got {} for 4 finger!\r", b).void_unwrap();
//                 counter += 1;
//
//             } else if counter == 5 {
//                 ufmt::uwriteln!(&mut serial, "Got {} for 5 finger!\r", b).void_unwrap();
//                 counter += 1;
//                 start = false;
//             }
//
//         }
//         counter = 0;
//         start = false;
//         // Answer
//         // ufmt::uwriteln!(&mut serial, "Got {}!\r", b).void_unwrap();
//     }
// }

// #![no_std]
// #![no_main]
//
// mod servo;
// use servo::ServoMotor;
//
// use core::panic::PanicInfo;
// use avr_hal_generic::usart::BaudrateArduinoExt;
// use avr_hal_generic::void::ResultVoidExt;
// use embedded_hal::serial::Read;
//
// #[panic_handler]
// fn panic(_info: &PanicInfo) -> ! {
//     loop {}
// }
//
// #[arduino_hal::entry]
// fn main() -> ! {
//     let dp = arduino_hal::Peripherals::take().unwrap();
//     let mut pins = arduino_hal::pins!(dp);
//     let mut serial = arduino_hal::default_serial!(dp, pins, 57600);
//
//     let mut servo_pin = pins.d10.into_output();
//     let _start = ServoMotor::write_10(&mut servo_pin, 0);
//
//     let mut servo_pin1 = pins.d5.into_output();
//     let _start = ServoMotor::write_5(&mut servo_pin1, 0);
//
//     let mut led = pins.d13.into_output(); // delete later
//     let b = 1;
//
//     ufmt::uwriteln!(&mut serial, "Hello from Arduino!\r").void_unwrap();
//
//     loop {
//         led.toggle();
//         arduino_hal::delay_ms(2000);
//         let b:u32 = nb::block!(serial.read()).void_unwrap().into();
//         // ufmt::uwriteln!(&mut serial, "Got {}!\r", b).void_unwrap();
//
//         if b == 49{
//             let _work = ServoMotor::write_10(&mut servo_pin, 90);
//             arduino_hal::delay_ms(3000);
//             let _work = ServoMotor::write_10(&mut servo_pin, 180);
//             arduino_hal::delay_ms(2000);
//             let _work = ServoMotor::write_10(&mut servo_pin, 0);
//         } else{
//             // let _work = ServoMotor::write_10(&mut servo_pin, 180);
//         }
//         // let _work = ServoMotor::write_10(&mut servo_pin, 180);
//
//         // arduino_hal::delay_ms(2000);
//         // let _work = ServoMotor::write_10(&mut servo_pin, 0);
//         arduino_hal::delay_ms(2000);
//         let _work = ServoMotor::write_5(&mut servo_pin1, 180);
//         arduino_hal::delay_ms(2000);
//         let _work = ServoMotor::write_5(&mut servo_pin1, 0);
//         arduino_hal::delay_ms(2000);
//     }
// }




на ноутбуке просто имя директории другое :))))
НЕТ)))))))
//avrdude -p m328p -c arduino -P /dev/ttyACM0 -b 115200 -U flash:w:hand_rust1.elf
avrdude -p m328p -c arduino -P /dev/ttyACM0 -b 115200 -U flash:w:rust_hand.elf


mismatched types [E0308] expected `Pin<Input<Floating>, PB1>`, found `Pin<Input<Floating>, PB1>